# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Schema subscription participant"""
interface AbstractParticipant {
  _id: ID!
  name: String!
  ows: Int!
  paid: Int!
}

"""Schema for participant loaner"""
interface AbstractSpLoaner {
  _id: ID!
  name: String!
  paid: Int!
}

"""Schema for event participant """
interface AbstractSpParticipant {
  _id: ID!
  exceed: Int!
  loaners: [SpLoaner!]
  name: String!
  ows: Int!
  paid: Int!
}

input CreateEvent {
  each: Float = 0
  isClosed: Boolean = false
  name: String
  participants: [CreateSpParticipant!] = []
  peopleCount: Float = 0
  price: Float = 0
}

input CreateSpLoaner {
  _id: ID!
  name: String!
  paid: Int = 0
}

input CreateSpParticipant {
  _id: ID!
  exceed: Int = 0
  loaners: [CreateSpLoaner!] = []
  name: String!
  ows: Int = 0
  paid: Int = 0
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Event Schema"""
type Event {
  _id: ID!

  """ISO date format"""
  closedAt: DateTime
  createdAt: DateTime!
  each: Int!
  isClosed: Boolean
  name: String!
  participants: [SpParticipant!]
  peopleCount: Int!
  price: Int!

  """ISO date format"""
  updatedAt: DateTime
}

"""Event payed subscription payload"""
type EventPayed {
  each: Int!
  participants: [Participant!]!
  total: Int!
}

type Mutation {
  addFriend(email: String!, userId: String!): User
  createEvent(data: CreateEvent!): Event!
  deleteEvent(id: String!): Event!
  login(email: String!, password: String!): User
  register(email: String!, name: String!, password: String!): User
  updateEvent(data: UpdateEvent!, id: String!): Event!
}

type Participant implements AbstractParticipant {
  _id: ID!
  name: String!
  ows: Int!
  paid: Int!
}

type Query {
  currentUser: User!
  spEvents(
    _id: ID
    _id_in: [ID!]

    """UTC format date"""
    closedAt: String

    """UTC format date"""
    createdAt: String
    each: Int
    isClosed: Boolean
    limit: Int = 30
    name: String
    order: String = "asc"
    page: Int = 0
    participants: [ID!]
    peopleCount: Int
    price: Int

    """UTC format date"""
    updatedAt: String
  ): [Event!]!
  spEventsJson(limit: Int = 30, order: String = "asc", page: Int = 0): [Event!]!
  spUsers(
    _id_in: [ID!]

    """ISO format date"""
    createdAt: String
    email: String
    id: String
    name: String

    """ISO format date"""
    updatedAt: String
  ): [User!]!
  spUsersJson: [User!]!
}

type SpLoaner implements AbstractSpLoaner {
  _id: ID!
  name: String!
  paid: Int!
}

type SpParticipant implements AbstractSpParticipant {
  _id: ID!
  exceed: Int!
  loaners: [SpLoaner!]
  name: String!
  ows: Int!
  paid: Int!
}

type Subscription {
  eventPayed: EventPayed!
}

input UpdateEvent {
  closedAt: DateTime
  each: Float
  isClosed: Boolean = false
  name: String
  participants: [CreateSpParticipant!]
  peopleCount: Float
  price: Float
}

"""User Schema"""
type User {
  _id: ID!

  """ISO date format"""
  createdAt: DateTime!
  email: String!
  events: [ID!]!
  eventsCount: Int
  friends: [ID!]!
  name: String!

  """ISO date format"""
  updatedAt: DateTime!
}
